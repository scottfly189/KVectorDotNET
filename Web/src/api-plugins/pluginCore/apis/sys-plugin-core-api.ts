/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET
 * 让 .NET 开发更简单、更通用、更流行。前后端分离架构(.NET6/Vue3)，开箱即用紧随前沿技术。<br/><a href='https://gitee.com/zuohuaijun/Admin.NET/'>https://gitee.com/zuohuaijun/Admin.NET</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 515096995@qq.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'; 
import { AdminResultSysFile } from '../../../api-services/models';
import { AdminResultSqlSugarPagedListSysPluginCore } from '../models';
import { AdminResultString } from '../../../api-services/models';
import { AdminResultSysPluginCoreReadme } from '../models';
import { AdminResultSysPluginCore } from '../models';
import { DeletePluginCoreInput } from '../models';
import { PagePluginCoreInput } from '../models'; 
import { UpdatePluginCoreSettingInput } from '../models'; 

/**
 * SysPluginApi - axios parameter creator
 * @export
 */
export const SysPluginCoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        
        /**
         * 
         * @summary 查看插件信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysPluginCoreBaseInfoGet: async (id:number,options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
              // verify required parameter 'userId' is not null or undefined
              if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiSysPluginCoreBaseInfoGet.');
            } 
            const localVarPath = `/api/sysPluginCore/details/{pid}`
            .replace(`{${"pid"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
          /**
         * 
         * @summary 查看插件文档
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
          apiSysPluginCoreReadmeGet: async (id:number,options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiSysPluginCoreBaseInfoGet.');
            } 
            const localVarPath = `/api/sysPluginCore/Readme/{pid}`
            .replace(`{${"pid"}}`, encodeURIComponent(String(id)));
           
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    /**
         * 
         * @summary 查看插件设置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiSysPluginCoreSettingGet: async (id:number,options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
        if (id === null || id === undefined) {
            throw new RequiredError('id','Required parameter id was null or undefined when calling apiSysPluginCoreSettingGet.');
        } 
        const localVarPath = `/api/sysPluginCore/Settings/{pid}`
        .replace(`{${"pid"}}`, encodeURIComponent(String(id)));
       
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, 'https://example.com');
        let baseOptions;
        if (configuration) {
            baseOptions = configuration.baseOptions;
        }
        const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication Bearer required
        // http bearer authentication required
        if (configuration && configuration.accessToken) {
            const accessToken = typeof configuration.accessToken === 'function'
                ? await configuration.accessToken()
                : await configuration.accessToken;
            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
        }

        const query = new URLSearchParams(localVarUrlObj.search);
        for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
        }
        for (const key in options.params) {
            query.set(key, options.params[key]);
        }
        localVarUrlObj.search = (new URLSearchParams(query)).toString();
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

        return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
        };
    },

     /**
         * 
         * @summary 更新动态插件设置
         * @param {UpdatePluginInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
     apiSysPluginCoreSettingUpdatePost: async (body?: UpdatePluginCoreSettingInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
        const localVarPath = `/api/sysPluginCore/settings`;
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(localVarPath, 'https://example.com');
        let baseOptions;
        if (configuration) {
            baseOptions = configuration.baseOptions;
        }
        const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
        const localVarHeaderParameter = {} as any;
        const localVarQueryParameter = {} as any;

        // authentication Bearer required
        // http bearer authentication required
        if (configuration && configuration.accessToken) {
            const accessToken = typeof configuration.accessToken === 'function'
                ? await configuration.accessToken()
                : await configuration.accessToken;
            localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
        }

        localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

        const query = new URLSearchParams(localVarUrlObj.search);
        for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
        }
        for (const key in options.params) {
            query.set(key, options.params[key]);
        }
        localVarUrlObj.search = (new URLSearchParams(query)).toString();
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
        const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
        localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

        return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
        };
    },
        
        /**
         * 
         * @summary 卸载动态插件
         * @param {DeletePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysPluginCoreDeletePost: async (body?: DeletePluginCoreInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysPluginCore/uninstall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
           /**
         * 
         * @summary 启用插件
         * @param {DeletePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
           apiSysPluginCoreEnablePost: async (body?: DeletePluginCoreInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysPluginCore/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
           /**
         * 
         * @summary 禁用插件
         * @param {DeletePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
           apiSysPluginCoreDisablePost: async (body?: DeletePluginCoreInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysPluginCore/disable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取动态插件列表
         * @param {PagePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysPluginCorePagePost: async (body?: PagePluginCoreInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysPluginCore/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
       
        /**
         * 
         * @summary 上传文件
         * @param {Blob} [file] 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileUploadFilePostForm: async (file?: Blob, path?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysPluginCore/uploadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysPluginApi - functional programming interface
 * @export
 */
export const SysPluginCoreApiFp = function(configuration?: Configuration) {
    return {
          /**
         * 
         * @summary 查看插件文档
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
          async apiSysPluginCoreReadmeGet(id:number,options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSysPluginCoreReadme>>> {
            const localVarAxiosArgs = await SysPluginCoreApiAxiosParamCreator(configuration).apiSysPluginCoreReadmeGet(id,options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
         /**
         * 
         * @summary 查看插件基本信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
         async apiSysPluginCoreBaseInfoGet(id:number,options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSysPluginCore>>> {
            const localVarAxiosArgs = await SysPluginCoreApiAxiosParamCreator(configuration).apiSysPluginCoreBaseInfoGet(id,options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
  /**
         * 
         * @summary 查看插件基本信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
  async apiSysPluginCoreSettingGet(id:number,options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultString>>> {
    const localVarAxiosArgs = await SysPluginCoreApiAxiosParamCreator(configuration).apiSysPluginCoreSettingGet(id,options);
    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
    };
},
 /**
         * 
         * @summary 更新动态插件
         * @param {UpdatePluginInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
 async apiSysPluginCoreSettingUpdatePost(body?: UpdatePluginCoreSettingInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
    const localVarAxiosArgs = await SysPluginCoreApiAxiosParamCreator(configuration).apiSysPluginCoreSettingUpdatePost(body, options);
    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
    };
},

        
        /**
         * 
         * @summary 卸载动态插件
         * @param {DeletePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysPluginCoreDeletePost(body?: DeletePluginCoreInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysPluginCoreApiAxiosParamCreator(configuration).apiSysPluginCoreDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
          /**
         * 
         * @summary 卸载动态插件
         * @param {EnablePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
          async apiSysPluginCoreEnablePost(body?: DeletePluginCoreInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysPluginCoreApiAxiosParamCreator(configuration).apiSysPluginCoreEnablePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
          /**
         * 
         * @summary 禁用插件
         * @param {DisablePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
          async apiSysPluginCoreDisablePost(body?: DeletePluginCoreInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysPluginCoreApiAxiosParamCreator(configuration).apiSysPluginCoreDisablePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取动态插件列表
         * @param {PagePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysPluginCorePagePost(body?: PagePluginCoreInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListSysPluginCore>>> {
            const localVarAxiosArgs = await SysPluginCoreApiAxiosParamCreator(configuration).apiSysPluginCorePagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        
        
         /**
         * 
         * @summary 上传文件
         * @param {Blob} [file] 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
         async apiSysFileUploadFilePostForm(file?: Blob, path?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSysFile>>> {
            const localVarAxiosArgs = await SysPluginCoreApiAxiosParamCreator(configuration).apiSysFileUploadFilePostForm(file, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SysPluginApi - factory interface
 * @export
 */
export const SysPluginCoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
  /**
         * 
         * @summary 查看插件文档
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
  async apiSysPluginCoreReadmeGet(id:number,options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSysPluginCoreReadme>> {
    return SysPluginCoreApiFp(configuration).apiSysPluginCoreReadmeGet(id,options).then((request) => request(axios, basePath));
},
        
         /**
         * 
         * @summary 查看插件基本信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
         async apiSysPluginCoreBaseInfoGet(id:number,options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSysPluginCore>> {
            return SysPluginCoreApiFp(configuration).apiSysPluginCoreBaseInfoGet(id,options).then((request) => request(axios, basePath));
        },
 /**
         * 
         * @summary 查看插件基本信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
 async apiSysPluginCoreSettingGet(id:number,options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultString>> {
    return SysPluginCoreApiFp(configuration).apiSysPluginCoreSettingGet(id,options).then((request) => request(axios, basePath));
},
          /**
         * 
         * @summary 更新动态插件
         * @param {UpdatePluginInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
          async apiSysPluginCoreSettingUpdatePost(body?: UpdatePluginCoreSettingInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysPluginCoreApiFp(configuration).apiSysPluginCoreSettingUpdatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 卸载动态插件
         * @param {DeletePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysPluginCoreDeletePost(body?: DeletePluginCoreInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysPluginCoreApiFp(configuration).apiSysPluginCoreDeletePost(body, options).then((request) => request(axios, basePath));
        },
         /**
         * 
         * @summary 启用插件
         * @param {DeletePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
         async apiSysPluginCoreEnablePost(body?: DeletePluginCoreInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysPluginCoreApiFp(configuration).apiSysPluginCoreEnablePost(body, options).then((request) => request(axios, basePath));
        },
         /**
         * 
         * @summary 禁用插件
         * @param {DeletePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
         async apiSysPluginCoreDisablePost(body?: DeletePluginCoreInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysPluginCoreApiFp(configuration).apiSysPluginCoreDisablePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取动态插件列表
         * @param {PagePluginCoreInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysPluginCorePagePost(body?: PagePluginCoreInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListSysPluginCore>> {
            return SysPluginCoreApiFp(configuration).apiSysPluginCorePagePost(body, options).then((request) => request(axios, basePath));
        },
       
          /**
         * 
         * @summary 上传文件
         * @param {Blob} [file] 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
          async apiSysFileUploadFilePostForm(file?: Blob, path?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSysFile>> {
            return SysPluginCoreApiFp(configuration).apiSysFileUploadFilePostForm(file, path, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SysPluginApi - object-oriented interface
 * @export
 * @class SysPluginApi
 * @extends {BaseAPI}
 */
export class SysPluginCoreApi extends BaseAPI {
      /**
     * 
     * @summary 查看插件文档
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPluginApi
     */
      public async apiSysPluginCoreReadmeGet(id:number,options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSysPluginCoreReadme>> {
        return SysPluginCoreApiFp(this.configuration).apiSysPluginCoreReadmeGet(id,options).then((request) => request(this.axios, this.basePath));
    }
     /**
     * 
     * @summary 查看插件基本信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPluginApi
     */
     public async apiSysPluginCoreBaseInfoGet(id:number,options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSysPluginCore>> {
        return SysPluginCoreApiFp(this.configuration).apiSysPluginCoreBaseInfoGet(id,options).then((request) => request(this.axios, this.basePath));
    }
      /**
     * 
     * @summary 查看插件设置信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPluginApi
     */
      public async apiSysPluginCoreSettingGet(id:number,options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultString>> {
        return SysPluginCoreApiFp(this.configuration).apiSysPluginCoreSettingGet(id,options).then((request) => request(this.axios, this.basePath));
    }
      /**
     * 
     * @summary 更新动态插件
     * @param {UpdatePluginInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPluginApi
     */
      public async apiSysPluginCoreSettingUpdatePost(body?: UpdatePluginCoreSettingInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysPluginCoreApiFp(this.configuration).apiSysPluginCoreSettingUpdatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 卸载动态插件
     * @param {DeletePluginCoreInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPluginApi
     */
    public async apiSysPluginCoreDeletePost(body?: DeletePluginCoreInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysPluginCoreApiFp(this.configuration).apiSysPluginCoreDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 启用插件
     * @param {EnablePluginCoreInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPluginApi
     */
    public async apiSysPluginCoreEnablePost(body?: DeletePluginCoreInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysPluginCoreApiFp(this.configuration).apiSysPluginCoreEnablePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 禁用插件
     * @param {DisablePluginCoreInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPluginApi
     */
    public async apiSysPluginCoreDisablePost(body?: DeletePluginCoreInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysPluginCoreApiFp(this.configuration).apiSysPluginCoreDisablePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取动态插件列表
     * @param {PagePluginCoreInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPluginApi
     */
    public async apiSysPluginCorePagePost(body?: PagePluginCoreInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListSysPluginCore>> {
        return SysPluginCoreApiFp(this.configuration).apiSysPluginCorePagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
     
     /**
     * 
     * @summary 上传文件
     * @param {Blob} [file] 
     * @param {string} [path] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
     public async apiSysFileUploadFilePostForm(file?: Blob, path?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSysFile>> {
        return SysPluginCoreApiFp(this.configuration).apiSysFileUploadFilePostForm(file, path, options).then((request) => request(this.axios, this.basePath));
    }
}
