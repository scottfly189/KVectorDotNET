/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET 通用权限开发平台
 * 让 .NET 开发更简单、更通用、更流行。整合最新技术，模块插件式开发，前后端分离，开箱即用。<br/><u><b><font color='FF0000'> 👮不得利用本项目从事危害国家安全、扰乱社会秩序、侵犯他人合法权益等法律法规禁止的活动！任何基于本项目二次开发而产生的一切法律纠纷和责任，我们不承担任何责任！</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminNETResultIActionResult } from '../models';
import { AdminNETResultListApiOutput } from '../models';
import { AdminNETResultListString } from '../models';
import { AdminNETResultSmKeyPairOutput } from '../models';
import { AdminNETResultStressTestHarnessResult } from '../models';
import { AdminNETResultString } from '../models';
import { StressTestInput } from '../models';
/**
 * SysCommonApi - axios parameter creator
 * @export
 */
export const SysCommonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取所有接口/动态API 🔖
         * @param {string} [groupName] 
         * @param {boolean} [isAppApi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCommonApiListGet: async (groupName?: string, isAppApi?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysCommon/apiList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupName !== undefined) {
                localVarQueryParameter['groupName'] = groupName;
            }

            if (isAppApi !== undefined) {
                localVarQueryParameter['isAppApi'] = isAppApi;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有移动端接口 🔖
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCommonAppApiListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysCommon/appApiList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 下载标记错误的临时 Excel（全局） 🔖
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCommonDownloadErrorExcelTempPost: async (fileName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysCommon/downloadErrorExcelTemp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生成所有移动端接口文件 🔖
         * @param {string} [groupName] 
         * @param {boolean} [isAppApi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCommonGenerateAppApiGet: async (groupName?: string, isAppApi?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysCommon/generateAppApi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupName !== undefined) {
                localVarQueryParameter['groupName'] = groupName;
            }

            if (isAppApi !== undefined) {
                localVarQueryParameter['isAppApi'] = isAppApi;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取MD5加密字符串 🏆
         * @param {string} text 
         * @param {boolean} uppercase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCommonMD5EncryptTextUppercaseGet: async (text: string, uppercase: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            if (text === null || text === undefined) {
                throw new RequiredError('text','Required parameter text was null or undefined when calling apiSysCommonMD5EncryptTextUppercaseGet.');
            }
            // verify required parameter 'uppercase' is not null or undefined
            if (uppercase === null || uppercase === undefined) {
                throw new RequiredError('uppercase','Required parameter uppercase was null or undefined when calling apiSysCommonMD5EncryptTextUppercaseGet.');
            }
            const localVarPath = `/api/sysCommon/mD5Encrypt/{text}/{uppercase}`
                .replace(`{${"text"}}`, encodeURIComponent(String(text)))
                .replace(`{${"uppercase"}}`, encodeURIComponent(String(uppercase)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取机器序列号 🔖
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCommonMachineSerialKeyGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysCommon/machineSerialKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 国密SM2解密字符串 🔖
         * @param {string} cipherText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCommonSM2DecryptCipherTextPost: async (cipherText: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cipherText' is not null or undefined
            if (cipherText === null || cipherText === undefined) {
                throw new RequiredError('cipherText','Required parameter cipherText was null or undefined when calling apiSysCommonSM2DecryptCipherTextPost.');
            }
            const localVarPath = `/api/sysCommon/sM2Decrypt/{cipherText}`
                .replace(`{${"cipherText"}}`, encodeURIComponent(String(cipherText)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 国密SM2加密字符串 🔖
         * @param {string} plainText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCommonSM2EncryptPlainTextPost: async (plainText: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plainText' is not null or undefined
            if (plainText === null || plainText === undefined) {
                throw new RequiredError('plainText','Required parameter plainText was null or undefined when calling apiSysCommonSM2EncryptPlainTextPost.');
            }
            const localVarPath = `/api/sysCommon/sM2Encrypt/{plainText}`
                .replace(`{${"plainText"}}`, encodeURIComponent(String(plainText)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取国密公钥私钥对 🏆
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCommonSmKeyPairGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysCommon/smKeyPair`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 性能压力测试 🔖
         * @param {StressTestInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCommonStressTestPost: async (body?: StressTestInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysCommon/stressTest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysCommonApi - functional programming interface
 * @export
 */
export const SysCommonApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取所有接口/动态API 🔖
         * @param {string} [groupName] 
         * @param {boolean} [isAppApi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonApiListGet(groupName?: string, isAppApi?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultListApiOutput>>> {
            const localVarAxiosArgs = await SysCommonApiAxiosParamCreator(configuration).apiSysCommonApiListGet(groupName, isAppApi, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取所有移动端接口 🔖
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonAppApiListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultListString>>> {
            const localVarAxiosArgs = await SysCommonApiAxiosParamCreator(configuration).apiSysCommonAppApiListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 下载标记错误的临时 Excel（全局） 🔖
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonDownloadErrorExcelTempPost(fileName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultIActionResult>>> {
            const localVarAxiosArgs = await SysCommonApiAxiosParamCreator(configuration).apiSysCommonDownloadErrorExcelTempPost(fileName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 生成所有移动端接口文件 🔖
         * @param {string} [groupName] 
         * @param {boolean} [isAppApi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonGenerateAppApiGet(groupName?: string, isAppApi?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysCommonApiAxiosParamCreator(configuration).apiSysCommonGenerateAppApiGet(groupName, isAppApi, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取MD5加密字符串 🏆
         * @param {string} text 
         * @param {boolean} uppercase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonMD5EncryptTextUppercaseGet(text: string, uppercase: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultString>>> {
            const localVarAxiosArgs = await SysCommonApiAxiosParamCreator(configuration).apiSysCommonMD5EncryptTextUppercaseGet(text, uppercase, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取机器序列号 🔖
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonMachineSerialKeyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultString>>> {
            const localVarAxiosArgs = await SysCommonApiAxiosParamCreator(configuration).apiSysCommonMachineSerialKeyGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 国密SM2解密字符串 🔖
         * @param {string} cipherText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonSM2DecryptCipherTextPost(cipherText: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultString>>> {
            const localVarAxiosArgs = await SysCommonApiAxiosParamCreator(configuration).apiSysCommonSM2DecryptCipherTextPost(cipherText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 国密SM2加密字符串 🔖
         * @param {string} plainText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonSM2EncryptPlainTextPost(plainText: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultString>>> {
            const localVarAxiosArgs = await SysCommonApiAxiosParamCreator(configuration).apiSysCommonSM2EncryptPlainTextPost(plainText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取国密公钥私钥对 🏆
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonSmKeyPairGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultSmKeyPairOutput>>> {
            const localVarAxiosArgs = await SysCommonApiAxiosParamCreator(configuration).apiSysCommonSmKeyPairGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 性能压力测试 🔖
         * @param {StressTestInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonStressTestPost(body?: StressTestInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultStressTestHarnessResult>>> {
            const localVarAxiosArgs = await SysCommonApiAxiosParamCreator(configuration).apiSysCommonStressTestPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SysCommonApi - factory interface
 * @export
 */
export const SysCommonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取所有接口/动态API 🔖
         * @param {string} [groupName] 
         * @param {boolean} [isAppApi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonApiListGet(groupName?: string, isAppApi?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultListApiOutput>> {
            return SysCommonApiFp(configuration).apiSysCommonApiListGet(groupName, isAppApi, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取所有移动端接口 🔖
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonAppApiListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultListString>> {
            return SysCommonApiFp(configuration).apiSysCommonAppApiListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 下载标记错误的临时 Excel（全局） 🔖
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonDownloadErrorExcelTempPost(fileName?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultIActionResult>> {
            return SysCommonApiFp(configuration).apiSysCommonDownloadErrorExcelTempPost(fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生成所有移动端接口文件 🔖
         * @param {string} [groupName] 
         * @param {boolean} [isAppApi] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonGenerateAppApiGet(groupName?: string, isAppApi?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysCommonApiFp(configuration).apiSysCommonGenerateAppApiGet(groupName, isAppApi, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取MD5加密字符串 🏆
         * @param {string} text 
         * @param {boolean} uppercase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonMD5EncryptTextUppercaseGet(text: string, uppercase: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultString>> {
            return SysCommonApiFp(configuration).apiSysCommonMD5EncryptTextUppercaseGet(text, uppercase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取机器序列号 🔖
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonMachineSerialKeyGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultString>> {
            return SysCommonApiFp(configuration).apiSysCommonMachineSerialKeyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 国密SM2解密字符串 🔖
         * @param {string} cipherText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonSM2DecryptCipherTextPost(cipherText: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultString>> {
            return SysCommonApiFp(configuration).apiSysCommonSM2DecryptCipherTextPost(cipherText, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 国密SM2加密字符串 🔖
         * @param {string} plainText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonSM2EncryptPlainTextPost(plainText: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultString>> {
            return SysCommonApiFp(configuration).apiSysCommonSM2EncryptPlainTextPost(plainText, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取国密公钥私钥对 🏆
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonSmKeyPairGet(options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultSmKeyPairOutput>> {
            return SysCommonApiFp(configuration).apiSysCommonSmKeyPairGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 性能压力测试 🔖
         * @param {StressTestInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCommonStressTestPost(body?: StressTestInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultStressTestHarnessResult>> {
            return SysCommonApiFp(configuration).apiSysCommonStressTestPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SysCommonApi - object-oriented interface
 * @export
 * @class SysCommonApi
 * @extends {BaseAPI}
 */
export class SysCommonApi extends BaseAPI {
    /**
     * 
     * @summary 获取所有接口/动态API 🔖
     * @param {string} [groupName] 
     * @param {boolean} [isAppApi] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCommonApi
     */
    public async apiSysCommonApiListGet(groupName?: string, isAppApi?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultListApiOutput>> {
        return SysCommonApiFp(this.configuration).apiSysCommonApiListGet(groupName, isAppApi, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取所有移动端接口 🔖
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCommonApi
     */
    public async apiSysCommonAppApiListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultListString>> {
        return SysCommonApiFp(this.configuration).apiSysCommonAppApiListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 下载标记错误的临时 Excel（全局） 🔖
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCommonApi
     */
    public async apiSysCommonDownloadErrorExcelTempPost(fileName?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultIActionResult>> {
        return SysCommonApiFp(this.configuration).apiSysCommonDownloadErrorExcelTempPost(fileName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 生成所有移动端接口文件 🔖
     * @param {string} [groupName] 
     * @param {boolean} [isAppApi] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCommonApi
     */
    public async apiSysCommonGenerateAppApiGet(groupName?: string, isAppApi?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysCommonApiFp(this.configuration).apiSysCommonGenerateAppApiGet(groupName, isAppApi, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取MD5加密字符串 🏆
     * @param {string} text 
     * @param {boolean} uppercase 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCommonApi
     */
    public async apiSysCommonMD5EncryptTextUppercaseGet(text: string, uppercase: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultString>> {
        return SysCommonApiFp(this.configuration).apiSysCommonMD5EncryptTextUppercaseGet(text, uppercase, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取机器序列号 🔖
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCommonApi
     */
    public async apiSysCommonMachineSerialKeyGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultString>> {
        return SysCommonApiFp(this.configuration).apiSysCommonMachineSerialKeyGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 国密SM2解密字符串 🔖
     * @param {string} cipherText 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCommonApi
     */
    public async apiSysCommonSM2DecryptCipherTextPost(cipherText: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultString>> {
        return SysCommonApiFp(this.configuration).apiSysCommonSM2DecryptCipherTextPost(cipherText, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 国密SM2加密字符串 🔖
     * @param {string} plainText 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCommonApi
     */
    public async apiSysCommonSM2EncryptPlainTextPost(plainText: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultString>> {
        return SysCommonApiFp(this.configuration).apiSysCommonSM2EncryptPlainTextPost(plainText, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取国密公钥私钥对 🏆
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCommonApi
     */
    public async apiSysCommonSmKeyPairGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultSmKeyPairOutput>> {
        return SysCommonApiFp(this.configuration).apiSysCommonSmKeyPairGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 性能压力测试 🔖
     * @param {StressTestInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCommonApi
     */
    public async apiSysCommonStressTestPost(body?: StressTestInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultStressTestHarnessResult>> {
        return SysCommonApiFp(this.configuration).apiSysCommonStressTestPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
