/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET 通用权限开发平台
 * 让 .NET 开发更简单、更通用、更流行。整合最新技术，模块插件式开发，前后端分离，开箱即用。<br/><u><b><font color='FF0000'> 👮不得利用本项目从事危害国家安全、扰乱社会秩序、侵犯他人合法权益等法律法规禁止的活动！任何基于本项目二次开发而产生的一切法律纠纷和责任，我们不承担任何责任！</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminNETResultIEnumerableEntityInfo } from '../models';
import { AdminNETResultListCodeGenConfig } from '../models';
import { AdminNETResultListColumnOuput } from '../models';
import { AdminNETResultSysCodeGenConfig } from '../models';
import { CodeGenConfig } from '../models';
import { Filter } from '../models';
import { FilterLogicEnum } from '../models';
import { FilterOperatorEnum } from '../models';
import { VerifyRuleItem } from '../models';
/**
 * SysCodeGenConfigApi - axios parameter creator
 * @export
 */
export const SysCodeGenConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取数据表列（实体属性）集合
         * @param {string} entityName 
         * @param {string} configId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCodeGenConfigColumnListEntityNameConfigIdGet: async (entityName: string, configId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityName' is not null or undefined
            if (entityName === null || entityName === undefined) {
                throw new RequiredError('entityName','Required parameter entityName was null or undefined when calling apiSysCodeGenConfigColumnListEntityNameConfigIdGet.');
            }
            // verify required parameter 'configId' is not null or undefined
            if (configId === null || configId === undefined) {
                throw new RequiredError('configId','Required parameter configId was null or undefined when calling apiSysCodeGenConfigColumnListEntityNameConfigIdGet.');
            }
            const localVarPath = `/api/sysCodeGenConfig/columnList/{entityName}/{configId}`
                .replace(`{${"entityName"}}`, encodeURIComponent(String(entityName)))
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取数据表列（实体属性）集合
         * @param {string} tableName 数据库表名
         * @param {string} busName 业务名（业务代码包名称）
         * @param {string} nameSpace 命名空间
         * @param {string} authorName 作者姓名
         * @param {string} generateType 生成方式
         * @param {boolean} generateMenu 是否生成菜单
         * @param {boolean} [isApiService] 是否使用 Api Service
         * @param {Array<number>} [codeGenTemplateIds] 模板Id集合
         * @param {string} [leftTab] 左边树形结构表
         * @param {string} [leftKey] 左边关联字段
         * @param {string} [leftPrimaryKey] 左边关联主表字段
         * @param {string} [leftName] 左边树Name
         * @param {string} [bottomTab] 下表名称
         * @param {string} [bottomKey] 下表关联字段
         * @param {string} [bottomPrimaryKey] 下表关联主表字段
         * @param {string} [template] 模板
         * @param {string} [tabType] 表类型
         * @param {string} [className] 类名
         * @param {string} [tablePrefix] 是否移除表前缀
         * @param {string} [configId] 库定位器名
         * @param {string} [dbName] 数据库名(保留字段)
         * @param {string} [dbType] 数据库类型
         * @param {string} [connectionString] 数据库链接
         * @param {string} [treeName] 树控件名称
         * @param {string} [treeKey] 树控件key
         * @param {string} [tableComment] 功能名（数据库表名称）
         * @param {string} [menuApplication] 菜单应用分类（应用编码）
         * @param {number} [menuPid] 菜单父级
         * @param {string} [menuIcon] 菜单图标
         * @param {string} [pagePath] 页面目录
         * @param {string} [printType] 支持打印类型
         * @param {string} [printName] 打印模版名称
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {Array<string>} [searchFields] 字段名称集合
         * @param {string} [searchKeyword] 关键字
         * @param {string} [keyword] 模糊查询关键字
         * @param {FilterLogicEnum} [filterLogic] 过滤条件
         * @param {Array<Filter>} [filterFilters] 筛选过滤条件子项
         * @param {string} [filterField] 字段名称
         * @param {FilterOperatorEnum} [filterOperator] 逻辑运算符
         * @param {any} [filterValue] 字段值
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCodeGenConfigColumnListGet: async (tableName: string, busName: string, nameSpace: string, authorName: string, generateType: string, generateMenu: boolean, isApiService?: boolean, codeGenTemplateIds?: Array<number>, leftTab?: string, leftKey?: string, leftPrimaryKey?: string, leftName?: string, bottomTab?: string, bottomKey?: string, bottomPrimaryKey?: string, template?: string, tabType?: string, className?: string, tablePrefix?: string, configId?: string, dbName?: string, dbType?: string, connectionString?: string, treeName?: string, treeKey?: string, tableComment?: string, menuApplication?: string, menuPid?: number, menuIcon?: string, pagePath?: string, printType?: string, printName?: string, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, searchFields?: Array<string>, searchKeyword?: string, keyword?: string, filterLogic?: FilterLogicEnum, filterFilters?: Array<Filter>, filterField?: string, filterOperator?: FilterOperatorEnum, filterValue?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableName' is not null or undefined
            if (tableName === null || tableName === undefined) {
                throw new RequiredError('tableName','Required parameter tableName was null or undefined when calling apiSysCodeGenConfigColumnListGet.');
            }
            // verify required parameter 'busName' is not null or undefined
            if (busName === null || busName === undefined) {
                throw new RequiredError('busName','Required parameter busName was null or undefined when calling apiSysCodeGenConfigColumnListGet.');
            }
            // verify required parameter 'nameSpace' is not null or undefined
            if (nameSpace === null || nameSpace === undefined) {
                throw new RequiredError('nameSpace','Required parameter nameSpace was null or undefined when calling apiSysCodeGenConfigColumnListGet.');
            }
            // verify required parameter 'authorName' is not null or undefined
            if (authorName === null || authorName === undefined) {
                throw new RequiredError('authorName','Required parameter authorName was null or undefined when calling apiSysCodeGenConfigColumnListGet.');
            }
            // verify required parameter 'generateType' is not null or undefined
            if (generateType === null || generateType === undefined) {
                throw new RequiredError('generateType','Required parameter generateType was null or undefined when calling apiSysCodeGenConfigColumnListGet.');
            }
            // verify required parameter 'generateMenu' is not null or undefined
            if (generateMenu === null || generateMenu === undefined) {
                throw new RequiredError('generateMenu','Required parameter generateMenu was null or undefined when calling apiSysCodeGenConfigColumnListGet.');
            }
            const localVarPath = `/api/sysCodeGenConfig/columnList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tableName !== undefined) {
                localVarQueryParameter['TableName'] = tableName;
            }

            if (busName !== undefined) {
                localVarQueryParameter['BusName'] = busName;
            }

            if (nameSpace !== undefined) {
                localVarQueryParameter['NameSpace'] = nameSpace;
            }

            if (authorName !== undefined) {
                localVarQueryParameter['AuthorName'] = authorName;
            }

            if (generateType !== undefined) {
                localVarQueryParameter['GenerateType'] = generateType;
            }

            if (generateMenu !== undefined) {
                localVarQueryParameter['GenerateMenu'] = generateMenu;
            }

            if (isApiService !== undefined) {
                localVarQueryParameter['IsApiService'] = isApiService;
            }

            if (codeGenTemplateIds) {
                localVarQueryParameter['CodeGenTemplateIds'] = codeGenTemplateIds;
            }

            if (leftTab !== undefined) {
                localVarQueryParameter['LeftTab'] = leftTab;
            }

            if (leftKey !== undefined) {
                localVarQueryParameter['LeftKey'] = leftKey;
            }

            if (leftPrimaryKey !== undefined) {
                localVarQueryParameter['LeftPrimaryKey'] = leftPrimaryKey;
            }

            if (leftName !== undefined) {
                localVarQueryParameter['LeftName'] = leftName;
            }

            if (bottomTab !== undefined) {
                localVarQueryParameter['BottomTab'] = bottomTab;
            }

            if (bottomKey !== undefined) {
                localVarQueryParameter['BottomKey'] = bottomKey;
            }

            if (bottomPrimaryKey !== undefined) {
                localVarQueryParameter['BottomPrimaryKey'] = bottomPrimaryKey;
            }

            if (template !== undefined) {
                localVarQueryParameter['Template'] = template;
            }

            if (tabType !== undefined) {
                localVarQueryParameter['TabType'] = tabType;
            }

            if (className !== undefined) {
                localVarQueryParameter['ClassName'] = className;
            }

            if (tablePrefix !== undefined) {
                localVarQueryParameter['TablePrefix'] = tablePrefix;
            }

            if (configId !== undefined) {
                localVarQueryParameter['ConfigId'] = configId;
            }

            if (dbName !== undefined) {
                localVarQueryParameter['DbName'] = dbName;
            }

            if (dbType !== undefined) {
                localVarQueryParameter['DbType'] = dbType;
            }

            if (connectionString !== undefined) {
                localVarQueryParameter['ConnectionString'] = connectionString;
            }

            if (treeName !== undefined) {
                localVarQueryParameter['TreeName'] = treeName;
            }

            if (treeKey !== undefined) {
                localVarQueryParameter['TreeKey'] = treeKey;
            }

            if (tableComment !== undefined) {
                localVarQueryParameter['TableComment'] = tableComment;
            }

            if (menuApplication !== undefined) {
                localVarQueryParameter['MenuApplication'] = menuApplication;
            }

            if (menuPid !== undefined) {
                localVarQueryParameter['MenuPid'] = menuPid;
            }

            if (menuIcon !== undefined) {
                localVarQueryParameter['MenuIcon'] = menuIcon;
            }

            if (pagePath !== undefined) {
                localVarQueryParameter['PagePath'] = pagePath;
            }

            if (printType !== undefined) {
                localVarQueryParameter['PrintType'] = printType;
            }

            if (printName !== undefined) {
                localVarQueryParameter['PrintName'] = printName;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (field !== undefined) {
                localVarQueryParameter['Field'] = field;
            }

            if (order !== undefined) {
                localVarQueryParameter['Order'] = order;
            }

            if (descStr !== undefined) {
                localVarQueryParameter['DescStr'] = descStr;
            }

            if (searchFields) {
                localVarQueryParameter['Search.Fields'] = searchFields;
            }

            if (searchKeyword !== undefined) {
                localVarQueryParameter['Search.Keyword'] = searchKeyword;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (filterLogic !== undefined) {
                localVarQueryParameter['Filter.Logic'] = filterLogic;
            }

            if (filterFilters) {
                localVarQueryParameter['Filter.Filters'] = filterFilters;
            }

            if (filterField !== undefined) {
                localVarQueryParameter['Filter.Field'] = filterField;
            }

            if (filterOperator !== undefined) {
                localVarQueryParameter['Filter.Operator'] = filterOperator;
            }

            if (filterValue !== undefined) {
                localVarQueryParameter['Filter.Value'] = filterValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取代码生成配置详情 🔖
         * @param {number} [id] 主键Id
         * @param {number} [codeGenId] 代码生成主表ID
         * @param {string} [columnName] 数据库字段名
         * @param {string} [propertyName] 实体属性名
         * @param {number} [columnLength] 字段数据长度
         * @param {string} [lowerPropertyName] 数据库字段名(首字母小写)
         * @param {string} [columnComment] 字段描述
         * @param {string} [netType] .NET类型
         * @param {string} [effectType] 作用类型（字典）
         * @param {string} [fkConfigId] 外键库标识
         * @param {string} [fkEntityName] 外键实体名称
         * @param {string} [fkTableName] 外键表名称
         * @param {string} [lowerFkEntityName] 外键实体名称(首字母小写)
         * @param {string} [fkColumnName] 外键显示字段
         * @param {string} [fkLinkColumnName] 外键链接字段
         * @param {string} [lowerFkColumnName] 外键显示字段(首字母小写)
         * @param {string} [fkColumnNetType] 外键显示字段.NET类型
         * @param {string} [dictTypeCode] 字典code
         * @param {string} [whetherRetract] 列表是否缩进（字典）
         * @param {string} [whetherRequired] 是否必填（字典）
         * @param {string} [whetherSortable] 是否可排序（字典）
         * @param {string} [statistical] 是否是统计字段
         * @param {string} [isGroupBy] 是否是GroupBy字段
         * @param {string} [queryWhether] 是否是查询条件
         * @param {string} [queryType] 查询方式
         * @param {string} [whetherTable] 列表显示
         * @param {string} [whetherAddUpdate] 增改
         * @param {string} [columnKey] 主外键
         * @param {string} [dataType] 数据库中类型（物理类型）
         * @param {string} [whetherCommon] 是否是通用字段
         * @param {string} [tableNickName] 表的别名 Table as XXX
         * @param {string} [displayColumn] 显示文本字段
         * @param {string} [valueColumn] 选中值字段
         * @param {string} [pidColumn] 父级字段
         * @param {number} [orderNo] 排序
         * @param {string} [rules] 字段验证规则
         * @param {string} [defaultValue] 默认值
         * @param {Array<VerifyRuleItem>} [ruleItems] 字段验证集合
         * @param {boolean} [remoteVerify] 是否远程验证
         * @param {boolean} [anyRule] 是否存在验证规则
         * @param {string} [trigger] 验证触发器
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCodeGenConfigDetailGet: async (id?: number, codeGenId?: number, columnName?: string, propertyName?: string, columnLength?: number, lowerPropertyName?: string, columnComment?: string, netType?: string, effectType?: string, fkConfigId?: string, fkEntityName?: string, fkTableName?: string, lowerFkEntityName?: string, fkColumnName?: string, fkLinkColumnName?: string, lowerFkColumnName?: string, fkColumnNetType?: string, dictTypeCode?: string, whetherRetract?: string, whetherRequired?: string, whetherSortable?: string, statistical?: string, isGroupBy?: string, queryWhether?: string, queryType?: string, whetherTable?: string, whetherAddUpdate?: string, columnKey?: string, dataType?: string, whetherCommon?: string, tableNickName?: string, displayColumn?: string, valueColumn?: string, pidColumn?: string, orderNo?: number, rules?: string, defaultValue?: string, ruleItems?: Array<VerifyRuleItem>, remoteVerify?: boolean, anyRule?: boolean, trigger?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysCodeGenConfig/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (codeGenId !== undefined) {
                localVarQueryParameter['CodeGenId'] = codeGenId;
            }

            if (columnName !== undefined) {
                localVarQueryParameter['ColumnName'] = columnName;
            }

            if (propertyName !== undefined) {
                localVarQueryParameter['PropertyName'] = propertyName;
            }

            if (columnLength !== undefined) {
                localVarQueryParameter['ColumnLength'] = columnLength;
            }

            if (lowerPropertyName !== undefined) {
                localVarQueryParameter['LowerPropertyName'] = lowerPropertyName;
            }

            if (columnComment !== undefined) {
                localVarQueryParameter['ColumnComment'] = columnComment;
            }

            if (netType !== undefined) {
                localVarQueryParameter['NetType'] = netType;
            }

            if (effectType !== undefined) {
                localVarQueryParameter['EffectType'] = effectType;
            }

            if (fkConfigId !== undefined) {
                localVarQueryParameter['FkConfigId'] = fkConfigId;
            }

            if (fkEntityName !== undefined) {
                localVarQueryParameter['FkEntityName'] = fkEntityName;
            }

            if (fkTableName !== undefined) {
                localVarQueryParameter['FkTableName'] = fkTableName;
            }

            if (lowerFkEntityName !== undefined) {
                localVarQueryParameter['LowerFkEntityName'] = lowerFkEntityName;
            }

            if (fkColumnName !== undefined) {
                localVarQueryParameter['FkColumnName'] = fkColumnName;
            }

            if (fkLinkColumnName !== undefined) {
                localVarQueryParameter['FkLinkColumnName'] = fkLinkColumnName;
            }

            if (lowerFkColumnName !== undefined) {
                localVarQueryParameter['LowerFkColumnName'] = lowerFkColumnName;
            }

            if (fkColumnNetType !== undefined) {
                localVarQueryParameter['FkColumnNetType'] = fkColumnNetType;
            }

            if (dictTypeCode !== undefined) {
                localVarQueryParameter['DictTypeCode'] = dictTypeCode;
            }

            if (whetherRetract !== undefined) {
                localVarQueryParameter['WhetherRetract'] = whetherRetract;
            }

            if (whetherRequired !== undefined) {
                localVarQueryParameter['WhetherRequired'] = whetherRequired;
            }

            if (whetherSortable !== undefined) {
                localVarQueryParameter['WhetherSortable'] = whetherSortable;
            }

            if (statistical !== undefined) {
                localVarQueryParameter['Statistical'] = statistical;
            }

            if (isGroupBy !== undefined) {
                localVarQueryParameter['IsGroupBy'] = isGroupBy;
            }

            if (queryWhether !== undefined) {
                localVarQueryParameter['QueryWhether'] = queryWhether;
            }

            if (queryType !== undefined) {
                localVarQueryParameter['QueryType'] = queryType;
            }

            if (whetherTable !== undefined) {
                localVarQueryParameter['WhetherTable'] = whetherTable;
            }

            if (whetherAddUpdate !== undefined) {
                localVarQueryParameter['WhetherAddUpdate'] = whetherAddUpdate;
            }

            if (columnKey !== undefined) {
                localVarQueryParameter['ColumnKey'] = columnKey;
            }

            if (dataType !== undefined) {
                localVarQueryParameter['DataType'] = dataType;
            }

            if (whetherCommon !== undefined) {
                localVarQueryParameter['WhetherCommon'] = whetherCommon;
            }

            if (tableNickName !== undefined) {
                localVarQueryParameter['TableNickName'] = tableNickName;
            }

            if (displayColumn !== undefined) {
                localVarQueryParameter['DisplayColumn'] = displayColumn;
            }

            if (valueColumn !== undefined) {
                localVarQueryParameter['ValueColumn'] = valueColumn;
            }

            if (pidColumn !== undefined) {
                localVarQueryParameter['PidColumn'] = pidColumn;
            }

            if (orderNo !== undefined) {
                localVarQueryParameter['OrderNo'] = orderNo;
            }

            if (rules !== undefined) {
                localVarQueryParameter['Rules'] = rules;
            }

            if (defaultValue !== undefined) {
                localVarQueryParameter['DefaultValue'] = defaultValue;
            }

            if (ruleItems) {
                localVarQueryParameter['RuleItems'] = ruleItems;
            }

            if (remoteVerify !== undefined) {
                localVarQueryParameter['RemoteVerify'] = remoteVerify;
            }

            if (anyRule !== undefined) {
                localVarQueryParameter['AnyRule'] = anyRule;
            }

            if (trigger !== undefined) {
                localVarQueryParameter['Trigger'] = trigger;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取库表信息
         * @param {boolean} excludeSysTable 是否排除带SysTable属性的表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCodeGenConfigEntityInfosExcludeSysTableGet: async (excludeSysTable: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'excludeSysTable' is not null or undefined
            if (excludeSysTable === null || excludeSysTable === undefined) {
                throw new RequiredError('excludeSysTable','Required parameter excludeSysTable was null or undefined when calling apiSysCodeGenConfigEntityInfosExcludeSysTableGet.');
            }
            const localVarPath = `/api/sysCodeGenConfig/entityInfos/{excludeSysTable}`
                .replace(`{${"excludeSysTable"}}`, encodeURIComponent(String(excludeSysTable)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取代码生成配置列表 🔖
         * @param {number} [id] 主键Id
         * @param {number} [codeGenId] 代码生成主表ID
         * @param {string} [columnName] 数据库字段名
         * @param {string} [propertyName] 实体属性名
         * @param {number} [columnLength] 字段数据长度
         * @param {string} [lowerPropertyName] 数据库字段名(首字母小写)
         * @param {string} [columnComment] 字段描述
         * @param {string} [netType] .NET类型
         * @param {string} [effectType] 作用类型（字典）
         * @param {string} [fkConfigId] 外键库标识
         * @param {string} [fkEntityName] 外键实体名称
         * @param {string} [fkTableName] 外键表名称
         * @param {string} [lowerFkEntityName] 外键实体名称(首字母小写)
         * @param {string} [fkColumnName] 外键显示字段
         * @param {string} [fkLinkColumnName] 外键链接字段
         * @param {string} [lowerFkColumnName] 外键显示字段(首字母小写)
         * @param {string} [fkColumnNetType] 外键显示字段.NET类型
         * @param {string} [dictTypeCode] 字典code
         * @param {string} [whetherRetract] 列表是否缩进（字典）
         * @param {string} [whetherRequired] 是否必填（字典）
         * @param {string} [whetherSortable] 是否可排序（字典）
         * @param {string} [statistical] 是否是统计字段
         * @param {string} [isGroupBy] 是否是GroupBy字段
         * @param {string} [queryWhether] 是否是查询条件
         * @param {string} [queryType] 查询方式
         * @param {string} [whetherTable] 列表显示
         * @param {string} [whetherAddUpdate] 增改
         * @param {string} [columnKey] 主外键
         * @param {string} [dataType] 数据库中类型（物理类型）
         * @param {string} [whetherCommon] 是否是通用字段
         * @param {string} [tableNickName] 表的别名 Table as XXX
         * @param {string} [displayColumn] 显示文本字段
         * @param {string} [valueColumn] 选中值字段
         * @param {string} [pidColumn] 父级字段
         * @param {number} [orderNo] 排序
         * @param {string} [rules] 字段验证规则
         * @param {string} [defaultValue] 默认值
         * @param {Array<VerifyRuleItem>} [ruleItems] 字段验证集合
         * @param {boolean} [remoteVerify] 是否远程验证
         * @param {boolean} [anyRule] 是否存在验证规则
         * @param {string} [trigger] 验证触发器
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCodeGenConfigListGet: async (id?: number, codeGenId?: number, columnName?: string, propertyName?: string, columnLength?: number, lowerPropertyName?: string, columnComment?: string, netType?: string, effectType?: string, fkConfigId?: string, fkEntityName?: string, fkTableName?: string, lowerFkEntityName?: string, fkColumnName?: string, fkLinkColumnName?: string, lowerFkColumnName?: string, fkColumnNetType?: string, dictTypeCode?: string, whetherRetract?: string, whetherRequired?: string, whetherSortable?: string, statistical?: string, isGroupBy?: string, queryWhether?: string, queryType?: string, whetherTable?: string, whetherAddUpdate?: string, columnKey?: string, dataType?: string, whetherCommon?: string, tableNickName?: string, displayColumn?: string, valueColumn?: string, pidColumn?: string, orderNo?: number, rules?: string, defaultValue?: string, ruleItems?: Array<VerifyRuleItem>, remoteVerify?: boolean, anyRule?: boolean, trigger?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysCodeGenConfig/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (codeGenId !== undefined) {
                localVarQueryParameter['CodeGenId'] = codeGenId;
            }

            if (columnName !== undefined) {
                localVarQueryParameter['ColumnName'] = columnName;
            }

            if (propertyName !== undefined) {
                localVarQueryParameter['PropertyName'] = propertyName;
            }

            if (columnLength !== undefined) {
                localVarQueryParameter['ColumnLength'] = columnLength;
            }

            if (lowerPropertyName !== undefined) {
                localVarQueryParameter['LowerPropertyName'] = lowerPropertyName;
            }

            if (columnComment !== undefined) {
                localVarQueryParameter['ColumnComment'] = columnComment;
            }

            if (netType !== undefined) {
                localVarQueryParameter['NetType'] = netType;
            }

            if (effectType !== undefined) {
                localVarQueryParameter['EffectType'] = effectType;
            }

            if (fkConfigId !== undefined) {
                localVarQueryParameter['FkConfigId'] = fkConfigId;
            }

            if (fkEntityName !== undefined) {
                localVarQueryParameter['FkEntityName'] = fkEntityName;
            }

            if (fkTableName !== undefined) {
                localVarQueryParameter['FkTableName'] = fkTableName;
            }

            if (lowerFkEntityName !== undefined) {
                localVarQueryParameter['LowerFkEntityName'] = lowerFkEntityName;
            }

            if (fkColumnName !== undefined) {
                localVarQueryParameter['FkColumnName'] = fkColumnName;
            }

            if (fkLinkColumnName !== undefined) {
                localVarQueryParameter['FkLinkColumnName'] = fkLinkColumnName;
            }

            if (lowerFkColumnName !== undefined) {
                localVarQueryParameter['LowerFkColumnName'] = lowerFkColumnName;
            }

            if (fkColumnNetType !== undefined) {
                localVarQueryParameter['FkColumnNetType'] = fkColumnNetType;
            }

            if (dictTypeCode !== undefined) {
                localVarQueryParameter['DictTypeCode'] = dictTypeCode;
            }

            if (whetherRetract !== undefined) {
                localVarQueryParameter['WhetherRetract'] = whetherRetract;
            }

            if (whetherRequired !== undefined) {
                localVarQueryParameter['WhetherRequired'] = whetherRequired;
            }

            if (whetherSortable !== undefined) {
                localVarQueryParameter['WhetherSortable'] = whetherSortable;
            }

            if (statistical !== undefined) {
                localVarQueryParameter['Statistical'] = statistical;
            }

            if (isGroupBy !== undefined) {
                localVarQueryParameter['IsGroupBy'] = isGroupBy;
            }

            if (queryWhether !== undefined) {
                localVarQueryParameter['QueryWhether'] = queryWhether;
            }

            if (queryType !== undefined) {
                localVarQueryParameter['QueryType'] = queryType;
            }

            if (whetherTable !== undefined) {
                localVarQueryParameter['WhetherTable'] = whetherTable;
            }

            if (whetherAddUpdate !== undefined) {
                localVarQueryParameter['WhetherAddUpdate'] = whetherAddUpdate;
            }

            if (columnKey !== undefined) {
                localVarQueryParameter['ColumnKey'] = columnKey;
            }

            if (dataType !== undefined) {
                localVarQueryParameter['DataType'] = dataType;
            }

            if (whetherCommon !== undefined) {
                localVarQueryParameter['WhetherCommon'] = whetherCommon;
            }

            if (tableNickName !== undefined) {
                localVarQueryParameter['TableNickName'] = tableNickName;
            }

            if (displayColumn !== undefined) {
                localVarQueryParameter['DisplayColumn'] = displayColumn;
            }

            if (valueColumn !== undefined) {
                localVarQueryParameter['ValueColumn'] = valueColumn;
            }

            if (pidColumn !== undefined) {
                localVarQueryParameter['PidColumn'] = pidColumn;
            }

            if (orderNo !== undefined) {
                localVarQueryParameter['OrderNo'] = orderNo;
            }

            if (rules !== undefined) {
                localVarQueryParameter['Rules'] = rules;
            }

            if (defaultValue !== undefined) {
                localVarQueryParameter['DefaultValue'] = defaultValue;
            }

            if (ruleItems) {
                localVarQueryParameter['RuleItems'] = ruleItems;
            }

            if (remoteVerify !== undefined) {
                localVarQueryParameter['RemoteVerify'] = remoteVerify;
            }

            if (anyRule !== undefined) {
                localVarQueryParameter['AnyRule'] = anyRule;
            }

            if (trigger !== undefined) {
                localVarQueryParameter['Trigger'] = trigger;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新代码生成配置 🔖
         * @param {Array<CodeGenConfig>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysCodeGenConfigUpdatePost: async (body?: Array<CodeGenConfig>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysCodeGenConfig/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysCodeGenConfigApi - functional programming interface
 * @export
 */
export const SysCodeGenConfigApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取数据表列（实体属性）集合
         * @param {string} entityName 
         * @param {string} configId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigColumnListEntityNameConfigIdGet(entityName: string, configId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultListColumnOuput>>> {
            const localVarAxiosArgs = await SysCodeGenConfigApiAxiosParamCreator(configuration).apiSysCodeGenConfigColumnListEntityNameConfigIdGet(entityName, configId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取数据表列（实体属性）集合
         * @param {string} tableName 数据库表名
         * @param {string} busName 业务名（业务代码包名称）
         * @param {string} nameSpace 命名空间
         * @param {string} authorName 作者姓名
         * @param {string} generateType 生成方式
         * @param {boolean} generateMenu 是否生成菜单
         * @param {boolean} [isApiService] 是否使用 Api Service
         * @param {Array<number>} [codeGenTemplateIds] 模板Id集合
         * @param {string} [leftTab] 左边树形结构表
         * @param {string} [leftKey] 左边关联字段
         * @param {string} [leftPrimaryKey] 左边关联主表字段
         * @param {string} [leftName] 左边树Name
         * @param {string} [bottomTab] 下表名称
         * @param {string} [bottomKey] 下表关联字段
         * @param {string} [bottomPrimaryKey] 下表关联主表字段
         * @param {string} [template] 模板
         * @param {string} [tabType] 表类型
         * @param {string} [className] 类名
         * @param {string} [tablePrefix] 是否移除表前缀
         * @param {string} [configId] 库定位器名
         * @param {string} [dbName] 数据库名(保留字段)
         * @param {string} [dbType] 数据库类型
         * @param {string} [connectionString] 数据库链接
         * @param {string} [treeName] 树控件名称
         * @param {string} [treeKey] 树控件key
         * @param {string} [tableComment] 功能名（数据库表名称）
         * @param {string} [menuApplication] 菜单应用分类（应用编码）
         * @param {number} [menuPid] 菜单父级
         * @param {string} [menuIcon] 菜单图标
         * @param {string} [pagePath] 页面目录
         * @param {string} [printType] 支持打印类型
         * @param {string} [printName] 打印模版名称
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {Array<string>} [searchFields] 字段名称集合
         * @param {string} [searchKeyword] 关键字
         * @param {string} [keyword] 模糊查询关键字
         * @param {FilterLogicEnum} [filterLogic] 过滤条件
         * @param {Array<Filter>} [filterFilters] 筛选过滤条件子项
         * @param {string} [filterField] 字段名称
         * @param {FilterOperatorEnum} [filterOperator] 逻辑运算符
         * @param {any} [filterValue] 字段值
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigColumnListGet(tableName: string, busName: string, nameSpace: string, authorName: string, generateType: string, generateMenu: boolean, isApiService?: boolean, codeGenTemplateIds?: Array<number>, leftTab?: string, leftKey?: string, leftPrimaryKey?: string, leftName?: string, bottomTab?: string, bottomKey?: string, bottomPrimaryKey?: string, template?: string, tabType?: string, className?: string, tablePrefix?: string, configId?: string, dbName?: string, dbType?: string, connectionString?: string, treeName?: string, treeKey?: string, tableComment?: string, menuApplication?: string, menuPid?: number, menuIcon?: string, pagePath?: string, printType?: string, printName?: string, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, searchFields?: Array<string>, searchKeyword?: string, keyword?: string, filterLogic?: FilterLogicEnum, filterFilters?: Array<Filter>, filterField?: string, filterOperator?: FilterOperatorEnum, filterValue?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultListColumnOuput>>> {
            const localVarAxiosArgs = await SysCodeGenConfigApiAxiosParamCreator(configuration).apiSysCodeGenConfigColumnListGet(tableName, busName, nameSpace, authorName, generateType, generateMenu, isApiService, codeGenTemplateIds, leftTab, leftKey, leftPrimaryKey, leftName, bottomTab, bottomKey, bottomPrimaryKey, template, tabType, className, tablePrefix, configId, dbName, dbType, connectionString, treeName, treeKey, tableComment, menuApplication, menuPid, menuIcon, pagePath, printType, printName, page, pageSize, field, order, descStr, searchFields, searchKeyword, keyword, filterLogic, filterFilters, filterField, filterOperator, filterValue, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取代码生成配置详情 🔖
         * @param {number} [id] 主键Id
         * @param {number} [codeGenId] 代码生成主表ID
         * @param {string} [columnName] 数据库字段名
         * @param {string} [propertyName] 实体属性名
         * @param {number} [columnLength] 字段数据长度
         * @param {string} [lowerPropertyName] 数据库字段名(首字母小写)
         * @param {string} [columnComment] 字段描述
         * @param {string} [netType] .NET类型
         * @param {string} [effectType] 作用类型（字典）
         * @param {string} [fkConfigId] 外键库标识
         * @param {string} [fkEntityName] 外键实体名称
         * @param {string} [fkTableName] 外键表名称
         * @param {string} [lowerFkEntityName] 外键实体名称(首字母小写)
         * @param {string} [fkColumnName] 外键显示字段
         * @param {string} [fkLinkColumnName] 外键链接字段
         * @param {string} [lowerFkColumnName] 外键显示字段(首字母小写)
         * @param {string} [fkColumnNetType] 外键显示字段.NET类型
         * @param {string} [dictTypeCode] 字典code
         * @param {string} [whetherRetract] 列表是否缩进（字典）
         * @param {string} [whetherRequired] 是否必填（字典）
         * @param {string} [whetherSortable] 是否可排序（字典）
         * @param {string} [statistical] 是否是统计字段
         * @param {string} [isGroupBy] 是否是GroupBy字段
         * @param {string} [queryWhether] 是否是查询条件
         * @param {string} [queryType] 查询方式
         * @param {string} [whetherTable] 列表显示
         * @param {string} [whetherAddUpdate] 增改
         * @param {string} [columnKey] 主外键
         * @param {string} [dataType] 数据库中类型（物理类型）
         * @param {string} [whetherCommon] 是否是通用字段
         * @param {string} [tableNickName] 表的别名 Table as XXX
         * @param {string} [displayColumn] 显示文本字段
         * @param {string} [valueColumn] 选中值字段
         * @param {string} [pidColumn] 父级字段
         * @param {number} [orderNo] 排序
         * @param {string} [rules] 字段验证规则
         * @param {string} [defaultValue] 默认值
         * @param {Array<VerifyRuleItem>} [ruleItems] 字段验证集合
         * @param {boolean} [remoteVerify] 是否远程验证
         * @param {boolean} [anyRule] 是否存在验证规则
         * @param {string} [trigger] 验证触发器
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigDetailGet(id?: number, codeGenId?: number, columnName?: string, propertyName?: string, columnLength?: number, lowerPropertyName?: string, columnComment?: string, netType?: string, effectType?: string, fkConfigId?: string, fkEntityName?: string, fkTableName?: string, lowerFkEntityName?: string, fkColumnName?: string, fkLinkColumnName?: string, lowerFkColumnName?: string, fkColumnNetType?: string, dictTypeCode?: string, whetherRetract?: string, whetherRequired?: string, whetherSortable?: string, statistical?: string, isGroupBy?: string, queryWhether?: string, queryType?: string, whetherTable?: string, whetherAddUpdate?: string, columnKey?: string, dataType?: string, whetherCommon?: string, tableNickName?: string, displayColumn?: string, valueColumn?: string, pidColumn?: string, orderNo?: number, rules?: string, defaultValue?: string, ruleItems?: Array<VerifyRuleItem>, remoteVerify?: boolean, anyRule?: boolean, trigger?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultSysCodeGenConfig>>> {
            const localVarAxiosArgs = await SysCodeGenConfigApiAxiosParamCreator(configuration).apiSysCodeGenConfigDetailGet(id, codeGenId, columnName, propertyName, columnLength, lowerPropertyName, columnComment, netType, effectType, fkConfigId, fkEntityName, fkTableName, lowerFkEntityName, fkColumnName, fkLinkColumnName, lowerFkColumnName, fkColumnNetType, dictTypeCode, whetherRetract, whetherRequired, whetherSortable, statistical, isGroupBy, queryWhether, queryType, whetherTable, whetherAddUpdate, columnKey, dataType, whetherCommon, tableNickName, displayColumn, valueColumn, pidColumn, orderNo, rules, defaultValue, ruleItems, remoteVerify, anyRule, trigger, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取库表信息
         * @param {boolean} excludeSysTable 是否排除带SysTable属性的表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigEntityInfosExcludeSysTableGet(excludeSysTable: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultIEnumerableEntityInfo>>> {
            const localVarAxiosArgs = await SysCodeGenConfigApiAxiosParamCreator(configuration).apiSysCodeGenConfigEntityInfosExcludeSysTableGet(excludeSysTable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取代码生成配置列表 🔖
         * @param {number} [id] 主键Id
         * @param {number} [codeGenId] 代码生成主表ID
         * @param {string} [columnName] 数据库字段名
         * @param {string} [propertyName] 实体属性名
         * @param {number} [columnLength] 字段数据长度
         * @param {string} [lowerPropertyName] 数据库字段名(首字母小写)
         * @param {string} [columnComment] 字段描述
         * @param {string} [netType] .NET类型
         * @param {string} [effectType] 作用类型（字典）
         * @param {string} [fkConfigId] 外键库标识
         * @param {string} [fkEntityName] 外键实体名称
         * @param {string} [fkTableName] 外键表名称
         * @param {string} [lowerFkEntityName] 外键实体名称(首字母小写)
         * @param {string} [fkColumnName] 外键显示字段
         * @param {string} [fkLinkColumnName] 外键链接字段
         * @param {string} [lowerFkColumnName] 外键显示字段(首字母小写)
         * @param {string} [fkColumnNetType] 外键显示字段.NET类型
         * @param {string} [dictTypeCode] 字典code
         * @param {string} [whetherRetract] 列表是否缩进（字典）
         * @param {string} [whetherRequired] 是否必填（字典）
         * @param {string} [whetherSortable] 是否可排序（字典）
         * @param {string} [statistical] 是否是统计字段
         * @param {string} [isGroupBy] 是否是GroupBy字段
         * @param {string} [queryWhether] 是否是查询条件
         * @param {string} [queryType] 查询方式
         * @param {string} [whetherTable] 列表显示
         * @param {string} [whetherAddUpdate] 增改
         * @param {string} [columnKey] 主外键
         * @param {string} [dataType] 数据库中类型（物理类型）
         * @param {string} [whetherCommon] 是否是通用字段
         * @param {string} [tableNickName] 表的别名 Table as XXX
         * @param {string} [displayColumn] 显示文本字段
         * @param {string} [valueColumn] 选中值字段
         * @param {string} [pidColumn] 父级字段
         * @param {number} [orderNo] 排序
         * @param {string} [rules] 字段验证规则
         * @param {string} [defaultValue] 默认值
         * @param {Array<VerifyRuleItem>} [ruleItems] 字段验证集合
         * @param {boolean} [remoteVerify] 是否远程验证
         * @param {boolean} [anyRule] 是否存在验证规则
         * @param {string} [trigger] 验证触发器
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigListGet(id?: number, codeGenId?: number, columnName?: string, propertyName?: string, columnLength?: number, lowerPropertyName?: string, columnComment?: string, netType?: string, effectType?: string, fkConfigId?: string, fkEntityName?: string, fkTableName?: string, lowerFkEntityName?: string, fkColumnName?: string, fkLinkColumnName?: string, lowerFkColumnName?: string, fkColumnNetType?: string, dictTypeCode?: string, whetherRetract?: string, whetherRequired?: string, whetherSortable?: string, statistical?: string, isGroupBy?: string, queryWhether?: string, queryType?: string, whetherTable?: string, whetherAddUpdate?: string, columnKey?: string, dataType?: string, whetherCommon?: string, tableNickName?: string, displayColumn?: string, valueColumn?: string, pidColumn?: string, orderNo?: number, rules?: string, defaultValue?: string, ruleItems?: Array<VerifyRuleItem>, remoteVerify?: boolean, anyRule?: boolean, trigger?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminNETResultListCodeGenConfig>>> {
            const localVarAxiosArgs = await SysCodeGenConfigApiAxiosParamCreator(configuration).apiSysCodeGenConfigListGet(id, codeGenId, columnName, propertyName, columnLength, lowerPropertyName, columnComment, netType, effectType, fkConfigId, fkEntityName, fkTableName, lowerFkEntityName, fkColumnName, fkLinkColumnName, lowerFkColumnName, fkColumnNetType, dictTypeCode, whetherRetract, whetherRequired, whetherSortable, statistical, isGroupBy, queryWhether, queryType, whetherTable, whetherAddUpdate, columnKey, dataType, whetherCommon, tableNickName, displayColumn, valueColumn, pidColumn, orderNo, rules, defaultValue, ruleItems, remoteVerify, anyRule, trigger, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新代码生成配置 🔖
         * @param {Array<CodeGenConfig>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigUpdatePost(body?: Array<CodeGenConfig>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysCodeGenConfigApiAxiosParamCreator(configuration).apiSysCodeGenConfigUpdatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SysCodeGenConfigApi - factory interface
 * @export
 */
export const SysCodeGenConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取数据表列（实体属性）集合
         * @param {string} entityName 
         * @param {string} configId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigColumnListEntityNameConfigIdGet(entityName: string, configId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultListColumnOuput>> {
            return SysCodeGenConfigApiFp(configuration).apiSysCodeGenConfigColumnListEntityNameConfigIdGet(entityName, configId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取数据表列（实体属性）集合
         * @param {string} tableName 数据库表名
         * @param {string} busName 业务名（业务代码包名称）
         * @param {string} nameSpace 命名空间
         * @param {string} authorName 作者姓名
         * @param {string} generateType 生成方式
         * @param {boolean} generateMenu 是否生成菜单
         * @param {boolean} [isApiService] 是否使用 Api Service
         * @param {Array<number>} [codeGenTemplateIds] 模板Id集合
         * @param {string} [leftTab] 左边树形结构表
         * @param {string} [leftKey] 左边关联字段
         * @param {string} [leftPrimaryKey] 左边关联主表字段
         * @param {string} [leftName] 左边树Name
         * @param {string} [bottomTab] 下表名称
         * @param {string} [bottomKey] 下表关联字段
         * @param {string} [bottomPrimaryKey] 下表关联主表字段
         * @param {string} [template] 模板
         * @param {string} [tabType] 表类型
         * @param {string} [className] 类名
         * @param {string} [tablePrefix] 是否移除表前缀
         * @param {string} [configId] 库定位器名
         * @param {string} [dbName] 数据库名(保留字段)
         * @param {string} [dbType] 数据库类型
         * @param {string} [connectionString] 数据库链接
         * @param {string} [treeName] 树控件名称
         * @param {string} [treeKey] 树控件key
         * @param {string} [tableComment] 功能名（数据库表名称）
         * @param {string} [menuApplication] 菜单应用分类（应用编码）
         * @param {number} [menuPid] 菜单父级
         * @param {string} [menuIcon] 菜单图标
         * @param {string} [pagePath] 页面目录
         * @param {string} [printType] 支持打印类型
         * @param {string} [printName] 打印模版名称
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {Array<string>} [searchFields] 字段名称集合
         * @param {string} [searchKeyword] 关键字
         * @param {string} [keyword] 模糊查询关键字
         * @param {FilterLogicEnum} [filterLogic] 过滤条件
         * @param {Array<Filter>} [filterFilters] 筛选过滤条件子项
         * @param {string} [filterField] 字段名称
         * @param {FilterOperatorEnum} [filterOperator] 逻辑运算符
         * @param {any} [filterValue] 字段值
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigColumnListGet(tableName: string, busName: string, nameSpace: string, authorName: string, generateType: string, generateMenu: boolean, isApiService?: boolean, codeGenTemplateIds?: Array<number>, leftTab?: string, leftKey?: string, leftPrimaryKey?: string, leftName?: string, bottomTab?: string, bottomKey?: string, bottomPrimaryKey?: string, template?: string, tabType?: string, className?: string, tablePrefix?: string, configId?: string, dbName?: string, dbType?: string, connectionString?: string, treeName?: string, treeKey?: string, tableComment?: string, menuApplication?: string, menuPid?: number, menuIcon?: string, pagePath?: string, printType?: string, printName?: string, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, searchFields?: Array<string>, searchKeyword?: string, keyword?: string, filterLogic?: FilterLogicEnum, filterFilters?: Array<Filter>, filterField?: string, filterOperator?: FilterOperatorEnum, filterValue?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultListColumnOuput>> {
            return SysCodeGenConfigApiFp(configuration).apiSysCodeGenConfigColumnListGet(tableName, busName, nameSpace, authorName, generateType, generateMenu, isApiService, codeGenTemplateIds, leftTab, leftKey, leftPrimaryKey, leftName, bottomTab, bottomKey, bottomPrimaryKey, template, tabType, className, tablePrefix, configId, dbName, dbType, connectionString, treeName, treeKey, tableComment, menuApplication, menuPid, menuIcon, pagePath, printType, printName, page, pageSize, field, order, descStr, searchFields, searchKeyword, keyword, filterLogic, filterFilters, filterField, filterOperator, filterValue, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取代码生成配置详情 🔖
         * @param {number} [id] 主键Id
         * @param {number} [codeGenId] 代码生成主表ID
         * @param {string} [columnName] 数据库字段名
         * @param {string} [propertyName] 实体属性名
         * @param {number} [columnLength] 字段数据长度
         * @param {string} [lowerPropertyName] 数据库字段名(首字母小写)
         * @param {string} [columnComment] 字段描述
         * @param {string} [netType] .NET类型
         * @param {string} [effectType] 作用类型（字典）
         * @param {string} [fkConfigId] 外键库标识
         * @param {string} [fkEntityName] 外键实体名称
         * @param {string} [fkTableName] 外键表名称
         * @param {string} [lowerFkEntityName] 外键实体名称(首字母小写)
         * @param {string} [fkColumnName] 外键显示字段
         * @param {string} [fkLinkColumnName] 外键链接字段
         * @param {string} [lowerFkColumnName] 外键显示字段(首字母小写)
         * @param {string} [fkColumnNetType] 外键显示字段.NET类型
         * @param {string} [dictTypeCode] 字典code
         * @param {string} [whetherRetract] 列表是否缩进（字典）
         * @param {string} [whetherRequired] 是否必填（字典）
         * @param {string} [whetherSortable] 是否可排序（字典）
         * @param {string} [statistical] 是否是统计字段
         * @param {string} [isGroupBy] 是否是GroupBy字段
         * @param {string} [queryWhether] 是否是查询条件
         * @param {string} [queryType] 查询方式
         * @param {string} [whetherTable] 列表显示
         * @param {string} [whetherAddUpdate] 增改
         * @param {string} [columnKey] 主外键
         * @param {string} [dataType] 数据库中类型（物理类型）
         * @param {string} [whetherCommon] 是否是通用字段
         * @param {string} [tableNickName] 表的别名 Table as XXX
         * @param {string} [displayColumn] 显示文本字段
         * @param {string} [valueColumn] 选中值字段
         * @param {string} [pidColumn] 父级字段
         * @param {number} [orderNo] 排序
         * @param {string} [rules] 字段验证规则
         * @param {string} [defaultValue] 默认值
         * @param {Array<VerifyRuleItem>} [ruleItems] 字段验证集合
         * @param {boolean} [remoteVerify] 是否远程验证
         * @param {boolean} [anyRule] 是否存在验证规则
         * @param {string} [trigger] 验证触发器
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigDetailGet(id?: number, codeGenId?: number, columnName?: string, propertyName?: string, columnLength?: number, lowerPropertyName?: string, columnComment?: string, netType?: string, effectType?: string, fkConfigId?: string, fkEntityName?: string, fkTableName?: string, lowerFkEntityName?: string, fkColumnName?: string, fkLinkColumnName?: string, lowerFkColumnName?: string, fkColumnNetType?: string, dictTypeCode?: string, whetherRetract?: string, whetherRequired?: string, whetherSortable?: string, statistical?: string, isGroupBy?: string, queryWhether?: string, queryType?: string, whetherTable?: string, whetherAddUpdate?: string, columnKey?: string, dataType?: string, whetherCommon?: string, tableNickName?: string, displayColumn?: string, valueColumn?: string, pidColumn?: string, orderNo?: number, rules?: string, defaultValue?: string, ruleItems?: Array<VerifyRuleItem>, remoteVerify?: boolean, anyRule?: boolean, trigger?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultSysCodeGenConfig>> {
            return SysCodeGenConfigApiFp(configuration).apiSysCodeGenConfigDetailGet(id, codeGenId, columnName, propertyName, columnLength, lowerPropertyName, columnComment, netType, effectType, fkConfigId, fkEntityName, fkTableName, lowerFkEntityName, fkColumnName, fkLinkColumnName, lowerFkColumnName, fkColumnNetType, dictTypeCode, whetherRetract, whetherRequired, whetherSortable, statistical, isGroupBy, queryWhether, queryType, whetherTable, whetherAddUpdate, columnKey, dataType, whetherCommon, tableNickName, displayColumn, valueColumn, pidColumn, orderNo, rules, defaultValue, ruleItems, remoteVerify, anyRule, trigger, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取库表信息
         * @param {boolean} excludeSysTable 是否排除带SysTable属性的表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigEntityInfosExcludeSysTableGet(excludeSysTable: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultIEnumerableEntityInfo>> {
            return SysCodeGenConfigApiFp(configuration).apiSysCodeGenConfigEntityInfosExcludeSysTableGet(excludeSysTable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取代码生成配置列表 🔖
         * @param {number} [id] 主键Id
         * @param {number} [codeGenId] 代码生成主表ID
         * @param {string} [columnName] 数据库字段名
         * @param {string} [propertyName] 实体属性名
         * @param {number} [columnLength] 字段数据长度
         * @param {string} [lowerPropertyName] 数据库字段名(首字母小写)
         * @param {string} [columnComment] 字段描述
         * @param {string} [netType] .NET类型
         * @param {string} [effectType] 作用类型（字典）
         * @param {string} [fkConfigId] 外键库标识
         * @param {string} [fkEntityName] 外键实体名称
         * @param {string} [fkTableName] 外键表名称
         * @param {string} [lowerFkEntityName] 外键实体名称(首字母小写)
         * @param {string} [fkColumnName] 外键显示字段
         * @param {string} [fkLinkColumnName] 外键链接字段
         * @param {string} [lowerFkColumnName] 外键显示字段(首字母小写)
         * @param {string} [fkColumnNetType] 外键显示字段.NET类型
         * @param {string} [dictTypeCode] 字典code
         * @param {string} [whetherRetract] 列表是否缩进（字典）
         * @param {string} [whetherRequired] 是否必填（字典）
         * @param {string} [whetherSortable] 是否可排序（字典）
         * @param {string} [statistical] 是否是统计字段
         * @param {string} [isGroupBy] 是否是GroupBy字段
         * @param {string} [queryWhether] 是否是查询条件
         * @param {string} [queryType] 查询方式
         * @param {string} [whetherTable] 列表显示
         * @param {string} [whetherAddUpdate] 增改
         * @param {string} [columnKey] 主外键
         * @param {string} [dataType] 数据库中类型（物理类型）
         * @param {string} [whetherCommon] 是否是通用字段
         * @param {string} [tableNickName] 表的别名 Table as XXX
         * @param {string} [displayColumn] 显示文本字段
         * @param {string} [valueColumn] 选中值字段
         * @param {string} [pidColumn] 父级字段
         * @param {number} [orderNo] 排序
         * @param {string} [rules] 字段验证规则
         * @param {string} [defaultValue] 默认值
         * @param {Array<VerifyRuleItem>} [ruleItems] 字段验证集合
         * @param {boolean} [remoteVerify] 是否远程验证
         * @param {boolean} [anyRule] 是否存在验证规则
         * @param {string} [trigger] 验证触发器
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigListGet(id?: number, codeGenId?: number, columnName?: string, propertyName?: string, columnLength?: number, lowerPropertyName?: string, columnComment?: string, netType?: string, effectType?: string, fkConfigId?: string, fkEntityName?: string, fkTableName?: string, lowerFkEntityName?: string, fkColumnName?: string, fkLinkColumnName?: string, lowerFkColumnName?: string, fkColumnNetType?: string, dictTypeCode?: string, whetherRetract?: string, whetherRequired?: string, whetherSortable?: string, statistical?: string, isGroupBy?: string, queryWhether?: string, queryType?: string, whetherTable?: string, whetherAddUpdate?: string, columnKey?: string, dataType?: string, whetherCommon?: string, tableNickName?: string, displayColumn?: string, valueColumn?: string, pidColumn?: string, orderNo?: number, rules?: string, defaultValue?: string, ruleItems?: Array<VerifyRuleItem>, remoteVerify?: boolean, anyRule?: boolean, trigger?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminNETResultListCodeGenConfig>> {
            return SysCodeGenConfigApiFp(configuration).apiSysCodeGenConfigListGet(id, codeGenId, columnName, propertyName, columnLength, lowerPropertyName, columnComment, netType, effectType, fkConfigId, fkEntityName, fkTableName, lowerFkEntityName, fkColumnName, fkLinkColumnName, lowerFkColumnName, fkColumnNetType, dictTypeCode, whetherRetract, whetherRequired, whetherSortable, statistical, isGroupBy, queryWhether, queryType, whetherTable, whetherAddUpdate, columnKey, dataType, whetherCommon, tableNickName, displayColumn, valueColumn, pidColumn, orderNo, rules, defaultValue, ruleItems, remoteVerify, anyRule, trigger, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新代码生成配置 🔖
         * @param {Array<CodeGenConfig>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysCodeGenConfigUpdatePost(body?: Array<CodeGenConfig>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysCodeGenConfigApiFp(configuration).apiSysCodeGenConfigUpdatePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SysCodeGenConfigApi - object-oriented interface
 * @export
 * @class SysCodeGenConfigApi
 * @extends {BaseAPI}
 */
export class SysCodeGenConfigApi extends BaseAPI {
    /**
     * 
     * @summary 获取数据表列（实体属性）集合
     * @param {string} entityName 
     * @param {string} configId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCodeGenConfigApi
     */
    public async apiSysCodeGenConfigColumnListEntityNameConfigIdGet(entityName: string, configId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultListColumnOuput>> {
        return SysCodeGenConfigApiFp(this.configuration).apiSysCodeGenConfigColumnListEntityNameConfigIdGet(entityName, configId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取数据表列（实体属性）集合
     * @param {string} tableName 数据库表名
     * @param {string} busName 业务名（业务代码包名称）
     * @param {string} nameSpace 命名空间
     * @param {string} authorName 作者姓名
     * @param {string} generateType 生成方式
     * @param {boolean} generateMenu 是否生成菜单
     * @param {boolean} [isApiService] 是否使用 Api Service
     * @param {Array<number>} [codeGenTemplateIds] 模板Id集合
     * @param {string} [leftTab] 左边树形结构表
     * @param {string} [leftKey] 左边关联字段
     * @param {string} [leftPrimaryKey] 左边关联主表字段
     * @param {string} [leftName] 左边树Name
     * @param {string} [bottomTab] 下表名称
     * @param {string} [bottomKey] 下表关联字段
     * @param {string} [bottomPrimaryKey] 下表关联主表字段
     * @param {string} [template] 模板
     * @param {string} [tabType] 表类型
     * @param {string} [className] 类名
     * @param {string} [tablePrefix] 是否移除表前缀
     * @param {string} [configId] 库定位器名
     * @param {string} [dbName] 数据库名(保留字段)
     * @param {string} [dbType] 数据库类型
     * @param {string} [connectionString] 数据库链接
     * @param {string} [treeName] 树控件名称
     * @param {string} [treeKey] 树控件key
     * @param {string} [tableComment] 功能名（数据库表名称）
     * @param {string} [menuApplication] 菜单应用分类（应用编码）
     * @param {number} [menuPid] 菜单父级
     * @param {string} [menuIcon] 菜单图标
     * @param {string} [pagePath] 页面目录
     * @param {string} [printType] 支持打印类型
     * @param {string} [printName] 打印模版名称
     * @param {number} [page] 当前页码
     * @param {number} [pageSize] 页码容量
     * @param {string} [field] 排序字段
     * @param {string} [order] 排序方向
     * @param {string} [descStr] 降序排序
     * @param {Array<string>} [searchFields] 字段名称集合
     * @param {string} [searchKeyword] 关键字
     * @param {string} [keyword] 模糊查询关键字
     * @param {FilterLogicEnum} [filterLogic] 过滤条件
     * @param {Array<Filter>} [filterFilters] 筛选过滤条件子项
     * @param {string} [filterField] 字段名称
     * @param {FilterOperatorEnum} [filterOperator] 逻辑运算符
     * @param {any} [filterValue] 字段值
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCodeGenConfigApi
     */
    public async apiSysCodeGenConfigColumnListGet(tableName: string, busName: string, nameSpace: string, authorName: string, generateType: string, generateMenu: boolean, isApiService?: boolean, codeGenTemplateIds?: Array<number>, leftTab?: string, leftKey?: string, leftPrimaryKey?: string, leftName?: string, bottomTab?: string, bottomKey?: string, bottomPrimaryKey?: string, template?: string, tabType?: string, className?: string, tablePrefix?: string, configId?: string, dbName?: string, dbType?: string, connectionString?: string, treeName?: string, treeKey?: string, tableComment?: string, menuApplication?: string, menuPid?: number, menuIcon?: string, pagePath?: string, printType?: string, printName?: string, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, searchFields?: Array<string>, searchKeyword?: string, keyword?: string, filterLogic?: FilterLogicEnum, filterFilters?: Array<Filter>, filterField?: string, filterOperator?: FilterOperatorEnum, filterValue?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultListColumnOuput>> {
        return SysCodeGenConfigApiFp(this.configuration).apiSysCodeGenConfigColumnListGet(tableName, busName, nameSpace, authorName, generateType, generateMenu, isApiService, codeGenTemplateIds, leftTab, leftKey, leftPrimaryKey, leftName, bottomTab, bottomKey, bottomPrimaryKey, template, tabType, className, tablePrefix, configId, dbName, dbType, connectionString, treeName, treeKey, tableComment, menuApplication, menuPid, menuIcon, pagePath, printType, printName, page, pageSize, field, order, descStr, searchFields, searchKeyword, keyword, filterLogic, filterFilters, filterField, filterOperator, filterValue, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取代码生成配置详情 🔖
     * @param {number} [id] 主键Id
     * @param {number} [codeGenId] 代码生成主表ID
     * @param {string} [columnName] 数据库字段名
     * @param {string} [propertyName] 实体属性名
     * @param {number} [columnLength] 字段数据长度
     * @param {string} [lowerPropertyName] 数据库字段名(首字母小写)
     * @param {string} [columnComment] 字段描述
     * @param {string} [netType] .NET类型
     * @param {string} [effectType] 作用类型（字典）
     * @param {string} [fkConfigId] 外键库标识
     * @param {string} [fkEntityName] 外键实体名称
     * @param {string} [fkTableName] 外键表名称
     * @param {string} [lowerFkEntityName] 外键实体名称(首字母小写)
     * @param {string} [fkColumnName] 外键显示字段
     * @param {string} [fkLinkColumnName] 外键链接字段
     * @param {string} [lowerFkColumnName] 外键显示字段(首字母小写)
     * @param {string} [fkColumnNetType] 外键显示字段.NET类型
     * @param {string} [dictTypeCode] 字典code
     * @param {string} [whetherRetract] 列表是否缩进（字典）
     * @param {string} [whetherRequired] 是否必填（字典）
     * @param {string} [whetherSortable] 是否可排序（字典）
     * @param {string} [statistical] 是否是统计字段
     * @param {string} [isGroupBy] 是否是GroupBy字段
     * @param {string} [queryWhether] 是否是查询条件
     * @param {string} [queryType] 查询方式
     * @param {string} [whetherTable] 列表显示
     * @param {string} [whetherAddUpdate] 增改
     * @param {string} [columnKey] 主外键
     * @param {string} [dataType] 数据库中类型（物理类型）
     * @param {string} [whetherCommon] 是否是通用字段
     * @param {string} [tableNickName] 表的别名 Table as XXX
     * @param {string} [displayColumn] 显示文本字段
     * @param {string} [valueColumn] 选中值字段
     * @param {string} [pidColumn] 父级字段
     * @param {number} [orderNo] 排序
     * @param {string} [rules] 字段验证规则
     * @param {string} [defaultValue] 默认值
     * @param {Array<VerifyRuleItem>} [ruleItems] 字段验证集合
     * @param {boolean} [remoteVerify] 是否远程验证
     * @param {boolean} [anyRule] 是否存在验证规则
     * @param {string} [trigger] 验证触发器
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCodeGenConfigApi
     */
    public async apiSysCodeGenConfigDetailGet(id?: number, codeGenId?: number, columnName?: string, propertyName?: string, columnLength?: number, lowerPropertyName?: string, columnComment?: string, netType?: string, effectType?: string, fkConfigId?: string, fkEntityName?: string, fkTableName?: string, lowerFkEntityName?: string, fkColumnName?: string, fkLinkColumnName?: string, lowerFkColumnName?: string, fkColumnNetType?: string, dictTypeCode?: string, whetherRetract?: string, whetherRequired?: string, whetherSortable?: string, statistical?: string, isGroupBy?: string, queryWhether?: string, queryType?: string, whetherTable?: string, whetherAddUpdate?: string, columnKey?: string, dataType?: string, whetherCommon?: string, tableNickName?: string, displayColumn?: string, valueColumn?: string, pidColumn?: string, orderNo?: number, rules?: string, defaultValue?: string, ruleItems?: Array<VerifyRuleItem>, remoteVerify?: boolean, anyRule?: boolean, trigger?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultSysCodeGenConfig>> {
        return SysCodeGenConfigApiFp(this.configuration).apiSysCodeGenConfigDetailGet(id, codeGenId, columnName, propertyName, columnLength, lowerPropertyName, columnComment, netType, effectType, fkConfigId, fkEntityName, fkTableName, lowerFkEntityName, fkColumnName, fkLinkColumnName, lowerFkColumnName, fkColumnNetType, dictTypeCode, whetherRetract, whetherRequired, whetherSortable, statistical, isGroupBy, queryWhether, queryType, whetherTable, whetherAddUpdate, columnKey, dataType, whetherCommon, tableNickName, displayColumn, valueColumn, pidColumn, orderNo, rules, defaultValue, ruleItems, remoteVerify, anyRule, trigger, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取库表信息
     * @param {boolean} excludeSysTable 是否排除带SysTable属性的表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCodeGenConfigApi
     */
    public async apiSysCodeGenConfigEntityInfosExcludeSysTableGet(excludeSysTable: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultIEnumerableEntityInfo>> {
        return SysCodeGenConfigApiFp(this.configuration).apiSysCodeGenConfigEntityInfosExcludeSysTableGet(excludeSysTable, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取代码生成配置列表 🔖
     * @param {number} [id] 主键Id
     * @param {number} [codeGenId] 代码生成主表ID
     * @param {string} [columnName] 数据库字段名
     * @param {string} [propertyName] 实体属性名
     * @param {number} [columnLength] 字段数据长度
     * @param {string} [lowerPropertyName] 数据库字段名(首字母小写)
     * @param {string} [columnComment] 字段描述
     * @param {string} [netType] .NET类型
     * @param {string} [effectType] 作用类型（字典）
     * @param {string} [fkConfigId] 外键库标识
     * @param {string} [fkEntityName] 外键实体名称
     * @param {string} [fkTableName] 外键表名称
     * @param {string} [lowerFkEntityName] 外键实体名称(首字母小写)
     * @param {string} [fkColumnName] 外键显示字段
     * @param {string} [fkLinkColumnName] 外键链接字段
     * @param {string} [lowerFkColumnName] 外键显示字段(首字母小写)
     * @param {string} [fkColumnNetType] 外键显示字段.NET类型
     * @param {string} [dictTypeCode] 字典code
     * @param {string} [whetherRetract] 列表是否缩进（字典）
     * @param {string} [whetherRequired] 是否必填（字典）
     * @param {string} [whetherSortable] 是否可排序（字典）
     * @param {string} [statistical] 是否是统计字段
     * @param {string} [isGroupBy] 是否是GroupBy字段
     * @param {string} [queryWhether] 是否是查询条件
     * @param {string} [queryType] 查询方式
     * @param {string} [whetherTable] 列表显示
     * @param {string} [whetherAddUpdate] 增改
     * @param {string} [columnKey] 主外键
     * @param {string} [dataType] 数据库中类型（物理类型）
     * @param {string} [whetherCommon] 是否是通用字段
     * @param {string} [tableNickName] 表的别名 Table as XXX
     * @param {string} [displayColumn] 显示文本字段
     * @param {string} [valueColumn] 选中值字段
     * @param {string} [pidColumn] 父级字段
     * @param {number} [orderNo] 排序
     * @param {string} [rules] 字段验证规则
     * @param {string} [defaultValue] 默认值
     * @param {Array<VerifyRuleItem>} [ruleItems] 字段验证集合
     * @param {boolean} [remoteVerify] 是否远程验证
     * @param {boolean} [anyRule] 是否存在验证规则
     * @param {string} [trigger] 验证触发器
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCodeGenConfigApi
     */
    public async apiSysCodeGenConfigListGet(id?: number, codeGenId?: number, columnName?: string, propertyName?: string, columnLength?: number, lowerPropertyName?: string, columnComment?: string, netType?: string, effectType?: string, fkConfigId?: string, fkEntityName?: string, fkTableName?: string, lowerFkEntityName?: string, fkColumnName?: string, fkLinkColumnName?: string, lowerFkColumnName?: string, fkColumnNetType?: string, dictTypeCode?: string, whetherRetract?: string, whetherRequired?: string, whetherSortable?: string, statistical?: string, isGroupBy?: string, queryWhether?: string, queryType?: string, whetherTable?: string, whetherAddUpdate?: string, columnKey?: string, dataType?: string, whetherCommon?: string, tableNickName?: string, displayColumn?: string, valueColumn?: string, pidColumn?: string, orderNo?: number, rules?: string, defaultValue?: string, ruleItems?: Array<VerifyRuleItem>, remoteVerify?: boolean, anyRule?: boolean, trigger?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminNETResultListCodeGenConfig>> {
        return SysCodeGenConfigApiFp(this.configuration).apiSysCodeGenConfigListGet(id, codeGenId, columnName, propertyName, columnLength, lowerPropertyName, columnComment, netType, effectType, fkConfigId, fkEntityName, fkTableName, lowerFkEntityName, fkColumnName, fkLinkColumnName, lowerFkColumnName, fkColumnNetType, dictTypeCode, whetherRetract, whetherRequired, whetherSortable, statistical, isGroupBy, queryWhether, queryType, whetherTable, whetherAddUpdate, columnKey, dataType, whetherCommon, tableNickName, displayColumn, valueColumn, pidColumn, orderNo, rules, defaultValue, ruleItems, remoteVerify, anyRule, trigger, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新代码生成配置 🔖
     * @param {Array<CodeGenConfig>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysCodeGenConfigApi
     */
    public async apiSysCodeGenConfigUpdatePost(body?: Array<CodeGenConfig>, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysCodeGenConfigApiFp(this.configuration).apiSysCodeGenConfigUpdatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
